import { useState } from 'react';
import Head from 'next/head';
import Header from 'components/header';
import IconButton from 'components/buttons/icon';
import SubmitButton from 'components/buttons/submit';
import { useForm, useFieldArray } from "react-hook-form";
import { PlusCircle, X, ArrowRightCircle } from 'react-feather';


import styles from 'styles/pages/Create.module.css'

type WordInput = {
  id: string,
  word: string,
  translations: Array<string>,
  associations: Array<string>
}

export default function Create() {
  const { control, register, handleSubmit } = useForm();
  const { fields, append, remove, update } = useFieldArray({
    control,
    name: "list",
  });

  const [currentFocus, setCurrentFocus] = useState('');

  const submitForm = (data: any) => {
    if(!data.list.length){
      return
    }

    if(!data.header){
      data.header = Date.now();
    }
    console.log(data)
  }

  const handleAddField = () => {
    append({ word: '', translations: [''], associations: [''] });
  }

  const handleRemoveField = (index:number) => {
    remove(index)
  }

  const handleAddTranslation = (index: number, field: WordInput) => {
      update(index, { ...field, translations: [... field.translations, ''] });
  }

  const handleRemoveTranslations = (translationIndex: number, index: number, field: WordInput) => {
    const head = field.translations.slice(0, translationIndex);
    const tail = field.translations.slice(translationIndex+1);
    const updatedTranslations = head.concat(tail);
    update(index, { ...field, translations: updatedTranslations });
  }

  const handleRemoveAssociations = (associationIndex: number, index: number, field: WordInput) => {
    const head = field.associations.slice(0, associationIndex);
    const tail = field.associations.slice(associationIndex+1);
    const updatedAssociations = head.concat(tail);
    update(index, { ...field, associations: updatedAssociations });
  }

  const handleAddAssociation = (index: number, field: WordInput) => {
    update(index, { ...field, associations: [... field.associations, ''] })
  }

  const handleFieldFocus = (field: string) => {
    setCurrentFocus(field);
  }

  const handleWordChange = (fieldValue: string, field: WordInput, index: number) => {
    update(index, { ...field, word: fieldValue});
  }

  const disableArrowButtonTranslations = (field: WordInput) => {
    const translationsLength = field.translations.length;
    if(!translationsLength){
      return false
    }
    return Boolean(!field.translations[translationsLength - 1])
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Fluent</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header/>
      <main className={styles.main}>
        <h1 className={styles.title}>
          Create List
        </h1>
        <form onSubmit={handleSubmit((data) => submitForm(data))}>
          <div style={{marginBottom: 30, width: 400}}>
            <input
              className={styles.word_input}
              {...register(`header`)}
              placeholder='Please enter new list name'
            />
          </div>
          {(fields as Array<WordInput>).map((field, index) => (
              <div key={field.id} className={styles.word_field_container}>
                <div className={styles.vertical_container}>
                  <div className={styles.input_container}>
                    <input
                      className={styles.word_input}
                      {...register(`list.${index}.word`)}
                      onChange={(event) => handleWordChange(event.target.value, field, index)}
                      onFocus={() => handleFieldFocus(`list.${index}.word`)}
                      autoFocus={currentFocus === `list.${index}.word`}
                    />
                    <IconButton onClick={() => handleRemoveField(index)}><X size={20}/></IconButton>
                  </div>
                  <div className={styles.horizontal_container}>
                    <span className={styles.additional_label}>Translations:</span>
                    {field.translations.map((translation, translationIndex) => (
                      <div key={translation} className={styles.additional_input_container}>
                        <input
                          className={styles.additional_input}
                          {...register(`list.${index}.translations.${translationIndex}`)}
                          onFocus={() => handleFieldFocus(`list.${index}.translations.${translationIndex}`)}
                          autoFocus={currentFocus === `list.${index}.translations.${translationIndex}`}
                        />
                        <IconButton onClick={() => handleRemoveTranslations(translationIndex, index, field)}><X size={20}/></IconButton>
                      </div>
                    ))}
                    <IconButton onClick={() => handleAddTranslation(index, field)}>
                      <ArrowRightCircle size={30}/>
                    </IconButton>
                  </div>
                  <div className={styles.horizontal_container}>
                    <span className={styles.additional_label}>Associations:</span>
                    {field.associations.map((association, associationIndex) => (
                      <div key={association} className={styles.additional_input_container}>
                        <input
                          className={styles.additional_input}
                          {...register(`list.${index}.associations.${associationIndex}`)}
                          onFocus={() => handleFieldFocus(`list.${index}.associations.${associationIndex}`)}
                          autoFocus={currentFocus === `list.${index}.associations.${associationIndex}`}
                        />
                        <IconButton onClick={() => handleRemoveAssociations(associationIndex, index, field)}><X size={20}/></IconButton>
                      </div>
                    ))}
                    <IconButton onClick={() => handleAddAssociation(index, field)}><ArrowRightCircle size={30}/></IconButton>
                  </div>
                </div>
              </div>
            ))}
          <div className={styles.icon_button_container}>
            <IconButton onClick={handleAddField}><PlusCircle size={50}/></IconButton>
          </div>
          <div>
            <SubmitButton label='Create list' disabled={fields.length === 0}/>
          </div>
        </form>
      </main>
    </div>
  )
}
